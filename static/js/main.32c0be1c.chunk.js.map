{"version":3,"sources":["serviceWorker.js","Home/Home.js","Faster_Game/Cell.js","Faster_Game/Board.js","Faster_Game/Game_Container.js","Faster_Game/Timer.js","Faster_Game/FasterApp.js","Home/Menu.js","Home/About.js","App.js","Root.js","index.js"],"names":["Boolean","window","location","hostname","match","Home","Cell","num","handleClick","console","log","style","border","onClick","transform","Board","numbers","class","map","index","key","Timer","useState","timeElapsed","setTimeElapsed","record","useRef","current","useEffect","setInterval","alert","clearInterval","Math","floor","array","i","push","Game_Container","setNumbers","gameFlag","setGameFlag","setCurrent","GameEnd","suffleNumber","length","j","random","width","height","indexOf","slice","FasterApp","Component","Menu","to","About","href","App","exact","path","component","Root","basename","process","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.32c0be1c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\nfunction Home() {\r\n    return(\r\n        <h1>이것이 당신의 홈페이지 입니다.</h1>\r\n    )\r\n}\r\n\r\nexport default Home;","//판 내부의 각각의 네모칸 객체가 될 것\r\nimport React, { Component } from \"react\";\r\n\r\n// class Cell extends Component{\r\n//     render() {\r\n//         const style = {\r\n//             border: '1px solid red'\r\n//         }\r\n\r\n//         return (\r\n//             <div style={style}>숫자^^</div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nfunction Cell( { num, handleClick } ) {\r\n    console.log(\"Cell\");\r\n    const style = {\r\n        border: '1px solid red',\r\n    }\r\n    const num_style = {\r\n        transform: 'translate(0%, 120%)'\r\n    }\r\n    return (\r\n        <div style={style} onClick={() => handleClick(num)}>\r\n            <center style={num_style}>\r\n                <b>{num !== 0 ? num : null}</b>\r\n            </center>\r\n        </div>\r\n    );\r\n}\r\n\r\n// const Container = styled.div`\r\n//   border: 1px solid red;\r\n// `;\r\n\r\nexport default Cell;","import React, { Component } from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport board from \"./faster_game.css\"\r\n\r\n\r\nfunction Board( {numbers,handleClick} ) {\r\n    console.log(\"Board\");\r\n  return (\r\n    <div class=\"board\">\r\n      {numbers.map((num, index) => (\r\n          <Cell num={num} key={index} handleClick={handleClick}/>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Board;","// Controller\r\n// import React, { Component } from 'react'\r\n// import Board from './Board';\r\n\r\n// class Game_Container extends Component{\r\n//     const [numbers, setNumbers] : useState(array)\r\n//     const [gameFlag, setGameFlag] : useState(false);\r\n//     const [current, setCurrent] : useState(1);\r\n//     const [timeElapsed, setTimeElapsed] : useState(0);\r\n\r\n//     render(){\r\n        \r\n        // const style = {\r\n        //     width: '600px',\r\n        //     height: '800px',\r\n        //     border: '1px solid black'\r\n        // }\r\n\r\n//         return(\r\n//             <div style={style}>\r\n//                 <Board/>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// export default Game_Container\r\n\r\nimport React, { useState } from \"react\";\r\nimport Board from \"./Board\";\r\nimport Timer from \"./Timer\";\r\n\r\nlet array = [];\r\nfor (let i = 1; i <= 25; i++) {\r\n  array.push(i);\r\n}\r\n\r\nfunction Game_Container() {\r\n    const [numbers, setNumbers] = useState(array);\r\n    const [gameFlag, setGameFlag] = useState(false);\r\n    const [current, setCurrent] = useState(1);\r\n\r\n    const handleClick = num => {\r\n        if(num === current) {\r\n            if(num === 50) {\r\n                console.log(\"Success\");\r\n                GameEnd();\r\n            }\r\n            const index = numbers.indexOf(num);\r\n            setNumbers(numbers => [\r\n                ...numbers.slice(0, index),\r\n                num < 26 ? num + 25 : 0,\r\n                ...numbers.slice(index+1)\r\n            ]);\r\n            setCurrent(current => current + 1);\r\n        }\r\n    };\r\n\r\n    const GameStart = () => {\r\n        setNumbers(suffleNumber(array));\r\n        setGameFlag(true);\r\n        setCurrent(1);\r\n    }\r\n    const GameEnd = () => {\r\n        setGameFlag(false)\r\n    }\r\n    const suffleNumber = (array) => {\r\n        for(let i = array.length - 1; i > 0; i--){\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n    };\r\n\r\n    const style = {\r\n        width: '600px',\r\n        height: '800px',\r\n        border: '1px solid black',\r\n    }\r\n\r\n\r\n  return (\r\n    <div style={style}>\r\n        <h1>당신의 게임. 순발력게임으로 대체되었다.</h1>\r\n        <center class=\"central\">\r\n        <Board numbers={numbers} handleClick={handleClick}></Board>\r\n        {gameFlag ? \r\n            (\r\n                <div>\r\n                    <a>게임중^~^</a>\r\n                    <Timer/>\r\n                </div>\r\n            ) : \r\n            <button class=\"startButton\" onClick={GameStart}>게임시작</button>\r\n        }\r\n        </center>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const Container = styled.div`\r\n//   width: 600px;\r\n//   height: 800px;\r\n//   border: 1px solid black;\r\n// `;\r\n\r\nexport default Game_Container;","import React, { useState, useEffect, useRef } from 'react'\r\n\r\nfunction Timer(){\r\n    const [timeElapsed, setTimeElapsed] = useState(0);\r\n    const record = useRef();\r\n    record.current = timeElapsed;\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            setTimeElapsed(timeElapsed => timeElapsed + 30);\r\n        }, 30);\r\n        return() => {\r\n            alert(\"Clear!!\\nYour Record : \" + record.current / 1000);\r\n            clearInterval(Timer);\r\n        };\r\n    }, []);\r\n    return(\r\n        <div class=\"timerContainer\">\r\n            <div class=\"timerFront\">{Math.floor(timeElapsed / 1000)}:</div>\r\n            <div class=\"timerBack\">{(timeElapsed % 1000) / 10}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer;","import React, { Component } from 'react';\r\nimport Game_Container from './Game_Container';\r\n\r\nclass FasterApp extends Component{\r\n    render(){\r\n        return(\r\n            <Game_Container/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FasterApp\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Menu = () => {\r\n    return (\r\n        <div>\r\n            <ul>\r\n                <li><Link to=\"/\">Home</Link></li>\r\n                <li><Link to=\"/speed\">Speed-Game</Link></li>\r\n                <li><Link to=\"/about\">About</Link></li>\r\n            </ul>\r\n            <hr/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;","import React from 'react'\r\n\r\nfunction About() {\r\n    return(\r\n        <div>\r\n            <h1>만든 사람 : Limm-jk</h1>\r\n            <a>해보고 싶은 것은 해봐야 성이 풀리는 개발자입니다.</a><br/>\r\n            <a>이것을 만드는 시점에는 React에 눈이 돌아간 것 같습니다.</a>\r\n            <ul>\r\n                <li><a href=\"https://github.com/Limm-jk\">Git Hub</a></li>\r\n                <li><a href=\"https://limm-jk.tistory.com/\">Blog</a></li>\r\n                <li><a href=\"\">Linked In</a></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './Home/Home';\nimport FasterApp from './Faster_Game/FasterApp';\nimport Menu from './Home/Menu';\nimport About from './Home/About'\n\nfunction App() {\n  return (\n    <div>\n      <Menu/>\n      <Route exact path=\"/\" component={Home}/>\n      {/* 위의 exact는 정확히 입력해야함을 뜻함. /같은경우 모두 사용되므로 밴 */}\n      <Route path=\"/speed\" component={FasterApp}/>\n      <Route path=\"/about\" component={About}/>\n    </div>\n  );\n}\n\nexport default App;\n","//대충 라우팅해주는 파일\r\n\r\nimport React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\n\r\nconst Root = () => (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <App/>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import FasterApp from './Faster_Game/FasterApp';\nimport * as serviceWorker from './serviceWorker';\nimport Root from './Root';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}